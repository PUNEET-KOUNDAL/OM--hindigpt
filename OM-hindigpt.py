{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10181849,"sourceType":"datasetVersion","datasetId":6289637}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/puneetkoundal/nanogpt-for-hindi?scriptVersionId=212746890\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# objective\n\n\"Building NanoGPT from Scratch for Hindi Corpus: Project 'OM'\n\nThis project involves developing a NanoGPT model from the ground up, specifically designed for processing and generating text in Hindi. The model will be trained on a Hindi corpus to ensure it captures the nuances of the language and produces coherent, contextually appropriate outputs. Named 'OM', this initiative aims to create a lightweight, efficient language model for Hindi NLP tasks.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:28.867809Z","iopub.execute_input":"2024-12-12T19:24:28.86823Z","iopub.status.idle":"2024-12-12T19:24:29.283209Z","shell.execute_reply.started":"2024-12-12T19:24:28.868195Z","shell.execute_reply":"2024-12-12T19:24:29.281963Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/mini-hindi-corpus/combo.txt\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# data preparation ","metadata":{}},{"cell_type":"code","source":"with open('/kaggle/input/mini-hindi-corpus/combo.txt','r',encoding='utf-8') as f :\n    text=f.read()\n\nprint(f\"the length of chracters dataset {len(text)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:29.28789Z","iopub.execute_input":"2024-12-12T19:24:29.288366Z","iopub.status.idle":"2024-12-12T19:24:29.533317Z","shell.execute_reply.started":"2024-12-12T19:24:29.288334Z","shell.execute_reply":"2024-12-12T19:24:29.532072Z"}},"outputs":[{"name":"stdout","text":"the length of chracters dataset 4025422\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"#checking first 1000 text\nprint(text[:1000])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:29.535425Z","iopub.execute_input":"2024-12-12T19:24:29.535912Z","iopub.status.idle":"2024-12-12T19:24:29.542332Z","shell.execute_reply.started":"2024-12-12T19:24:29.535864Z","shell.execute_reply":"2024-12-12T19:24:29.540881Z"}},"outputs":[{"name":"stdout","text":"\nआभूषणों की निंदा करना हमारा उद्देश्य नहीं है \n हम असहयोग का उत्पीड़न सह सकते हैं पर ललनाओं के निर्दय घातक वाक्बाणों को नहीं ओढ़ सकते \n तो भी इतना अवश्य कहेंगे कि इस तृष्णा की पूर्ति के लिए जितना त्याग किया जाता है उसका सदुपयोग करने से महान् पद प्राप्त हो सकता है\nयद्यपि हमने किसी रूप हीना महिला को आभूषणों की सजावट से रूपवती होते नहीं देखा तथापि हम यह भी मान लेते हैं कि रूप के लिए आभूषणों की उतनी ही जरूरत है जितनी घर के लिए दीपक की \n किन्तु शारीरिक शोभा के लिए हम तन को कितना मलिन चित्त को कितना अशांत और आत्मा को कितना कलुषित बना लेते हैं इसका हमें कदाचित् ज्ञान ही नहीं होता \n इस दीपक की ज्योति में आँखें धुँधली हो जाती हैं \n यह चमक दमक कितनी ईर्ष्या कितने द्वेष कितनी प्रतिस्पर्धा कितनी दुश्चिंता और कितनी दुराशा का कारण है इसकी केवल कल्पना से ही रोंगटे खड़े हो जाते हैं \n इन्हें भूषण नहीं दूषण कहना अधिक उपयुक्त है \n नहीं तो यह कब हो सकता था कि कोई नववधू पति के घर आने के तीसरे दिन अपने पति से कहती कि मेरे पिता ने तुम्हारे पल्ले बाँध कर मुझे तो कुएँ में ढकेल दिया \n शीतला आज अपने गाँव के ताल्लुक\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"#from uppar code we get confuse how code is calculation len of text\nlines = text.split('\\n')\nsecond_row = lines[1]\nprint(second_row)  ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:29.676633Z","iopub.execute_input":"2024-12-12T19:24:29.677085Z","iopub.status.idle":"2024-12-12T19:24:29.705166Z","shell.execute_reply.started":"2024-12-12T19:24:29.677049Z","shell.execute_reply":"2024-12-12T19:24:29.703859Z"}},"outputs":[{"name":"stdout","text":"आभूषणों की निंदा करना हमारा उद्देश्य नहीं है \n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"print(len(second_row))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:29.86594Z","iopub.execute_input":"2024-12-12T19:24:29.866284Z","iopub.status.idle":"2024-12-12T19:24:29.872253Z","shell.execute_reply.started":"2024-12-12T19:24:29.866255Z","shell.execute_reply":"2024-12-12T19:24:29.871078Z"}},"outputs":[{"name":"stdout","text":"45\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"print(text[:8])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:30.066923Z","iopub.execute_input":"2024-12-12T19:24:30.067312Z","iopub.status.idle":"2024-12-12T19:24:30.073779Z","shell.execute_reply.started":"2024-12-12T19:24:30.06728Z","shell.execute_reply":"2024-12-12T19:24:30.072159Z"}},"outputs":[{"name":"stdout","text":"\nआभूषणों\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"print(len(text[:8]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:30.566765Z","iopub.execute_input":"2024-12-12T19:24:30.567216Z","iopub.status.idle":"2024-12-12T19:24:30.573935Z","shell.execute_reply.started":"2024-12-12T19:24:30.567179Z","shell.execute_reply":"2024-12-12T19:24:30.572502Z"}},"outputs":[{"name":"stdout","text":"8\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"chars=sorted(list(set(text)))\nvocal_size=len(chars)\nprint(chars)\nprint(vocal_size)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:30.856388Z","iopub.execute_input":"2024-12-12T19:24:30.856768Z","iopub.status.idle":"2024-12-12T19:24:31.076406Z","shell.execute_reply.started":"2024-12-12T19:24:30.856734Z","shell.execute_reply":"2024-12-12T19:24:31.075154Z"}},"outputs":[{"name":"stdout","text":"['\\n', '\\x1a', ' ', '\\xa0', '²', '×', 'ò', 'ú', 'ँ', 'ं', 'ः', 'अ', 'आ', 'इ', 'ई', 'उ', 'ऊ', 'ऋ', 'ऍ', 'ऎ', 'ए', 'ऐ', 'ऑ', 'ओ', 'औ', 'क', 'ख', 'ग', 'घ', 'ङ', 'च', 'छ', 'ज', 'झ', 'ञ', 'ट', 'ठ', 'ड', 'ढ', 'ण', 'त', 'थ', 'द', 'ध', 'न', 'ऩ', 'प', 'फ', 'ब', 'भ', 'म', 'य', 'र', 'ऱ', 'ल', 'ळ', 'व', 'श', 'ष', 'स', 'ह', '़', 'ा', 'ि', 'ी', 'ु', 'ू', 'ृ', 'ॅ', 'े', 'ै', 'ॉ', 'ो', 'ौ', '्', 'क़', 'ख़', 'ग़', 'ज़', 'ड़', 'ढ़', 'फ़', 'य़', 'ॠ', 'ॢ', '॥', '०', '१', '२', '३', '४', '५', '६', '७', '८', '९', '\\u200c', '\\u200d', '–', '—', '“', '”', '…']\n103\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"# tokenization","metadata":{}},{"cell_type":"code","source":"# Assuming `chars` is a list of characters in your vocabulary\nstoi = {ch: i for i, ch in enumerate(chars)}\nitos = {i: ch for i, ch in enumerate(chars)}\n\n# Function to encode a string into a list of integers\nencode = lambda s: [stoi[c] for c in s]\n\n# Function to decode a list of integers back into a string\ndecode = lambda l: ''.join(itos[i] for i in l)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:24:31.546945Z","iopub.execute_input":"2024-12-12T19:24:31.547359Z","iopub.status.idle":"2024-12-12T19:24:31.556563Z","shell.execute_reply.started":"2024-12-12T19:24:31.547325Z","shell.execute_reply":"2024-12-12T19:24:31.555237Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"print(encode(\"इन्हें भूषण नहीं दूषण कहना अधिक उपयुक्त है\"))\nprint(decode(encode(\"इन्हें भूषण नहीं दूषण कहना अधिक उपयुक्त है\")))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:25:18.877878Z","iopub.execute_input":"2024-12-12T19:25:18.879019Z","iopub.status.idle":"2024-12-12T19:25:18.885091Z","shell.execute_reply.started":"2024-12-12T19:25:18.878977Z","shell.execute_reply":"2024-12-12T19:25:18.883731Z"}},"outputs":[{"name":"stdout","text":"[13, 44, 74, 60, 69, 9, 2, 49, 66, 58, 39, 2, 44, 60, 64, 9, 2, 42, 66, 58, 39, 2, 25, 60, 44, 62, 2, 11, 43, 63, 25, 2, 15, 46, 51, 65, 25, 74, 40, 2, 60, 70]\nइन्हें भूषण नहीं दूषण कहना अधिक उपयुक्त है\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"#did normalization work \n#let see in further labs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:26:00.408542Z","iopub.execute_input":"2024-12-12T19:26:00.409071Z","iopub.status.idle":"2024-12-12T19:26:00.4155Z","shell.execute_reply.started":"2024-12-12T19:26:00.409033Z","shell.execute_reply":"2024-12-12T19:26:00.414259Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"import torch \ndata=torch.tensor(encode(text) , dtype=torch.long)\nprint(data.shape,data.dtype)\nprint(data[:1000])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:31:10.607079Z","iopub.execute_input":"2024-12-12T19:31:10.607466Z","iopub.status.idle":"2024-12-12T19:31:11.402844Z","shell.execute_reply.started":"2024-12-12T19:31:10.607436Z","shell.execute_reply":"2024-12-12T19:31:11.401687Z"}},"outputs":[{"name":"stdout","text":"torch.Size([4025422]) torch.int64\ntensor([ 0, 12, 49, 66, 58, 39, 72,  9,  2, 25, 64,  2, 44, 63,  9, 42, 62,  2,\n        25, 52, 44, 62,  2, 60, 50, 62, 52, 62,  2, 15, 42, 74, 42, 69, 57, 74,\n        51,  2, 44, 60, 64,  9,  2, 60, 70,  2,  0,  2, 60, 50,  2, 11, 59, 60,\n        51, 72, 27,  2, 25, 62,  2, 15, 40, 74, 46, 64, 79, 44,  2, 59, 60,  2,\n        59, 25, 40, 69,  2, 60, 70,  9,  2, 46, 52,  2, 54, 54, 44, 62, 23,  9,\n         2, 25, 69,  2, 44, 63, 52, 74, 42, 51,  2, 28, 62, 40, 25,  2, 56, 62,\n        25, 74, 48, 62, 39, 72,  9,  2, 25, 72,  2, 44, 60, 64,  9,  2, 23, 80,\n         2, 59, 25, 40, 69,  2,  0,  2, 40, 72,  2, 49, 64,  2, 13, 40, 44, 62,\n         2, 11, 56, 57, 74, 51,  2, 25, 60, 69,  9, 27, 69,  2, 25, 63,  2, 13,\n        59,  2, 40, 67, 58, 74, 39, 62,  2, 25, 64,  2, 46, 66, 52, 74, 40, 63,\n         2, 25, 69,  2, 54, 63, 20,  2, 32, 63, 40, 44, 62,  2, 40, 74, 51, 62,\n        27,  2, 25, 63, 51, 62,  2, 32, 62, 40, 62,  2, 60, 70,  2, 15, 59, 25,\n        62,  2, 59, 42, 65, 46, 51, 72, 27,  2, 25, 52, 44, 69,  2, 59, 69,  2,\n        50, 60, 62, 44, 74,  2, 46, 42,  2, 46, 74, 52, 62, 46, 74, 40,  2, 60,\n        72,  2, 59, 25, 40, 62,  2, 60, 70,  0, 51, 42, 74, 51, 46, 63,  2, 60,\n        50, 44, 69,  2, 25, 63, 59, 64,  2, 52, 66, 46,  2, 60, 64, 44, 62,  2,\n        50, 60, 63, 54, 62,  2, 25, 72,  2, 12, 49, 66, 58, 39, 72,  9,  2, 25,\n        64,  2, 59, 32, 62, 56, 35,  2, 59, 69,  2, 52, 66, 46, 56, 40, 64,  2,\n        60, 72, 40, 69,  2, 44, 60, 64,  9,  2, 42, 69, 26, 62,  2, 40, 41, 62,\n        46, 63,  2, 60, 50,  2, 51, 60,  2, 49, 64,  2, 50, 62, 44,  2, 54, 69,\n        40, 69,  2, 60, 70,  9,  2, 25, 63,  2, 52, 66, 46,  2, 25, 69,  2, 54,\n        63, 20,  2, 12, 49, 66, 58, 39, 72,  9,  2, 25, 64,  2, 15, 40, 44, 64,\n         2, 60, 64,  2, 32, 52, 66, 52, 40,  2, 60, 70,  2, 32, 63, 40, 44, 64,\n         2, 28, 52,  2, 25, 69,  2, 54, 63, 20,  2, 42, 64, 46, 25,  2, 25, 64,\n         2,  0,  2, 25, 63, 44, 74, 40, 65,  2, 57, 62, 52, 64, 52, 63, 25,  2,\n        57, 72, 49, 62,  2, 25, 69,  2, 54, 63, 20,  2, 60, 50,  2, 40, 44,  2,\n        25, 72,  2, 25, 63, 40, 44, 62,  2, 50, 54, 63, 44,  2, 30, 63, 40, 74,\n        40,  2, 25, 72,  2, 25, 63, 40, 44, 62,  2, 11, 57, 62,  9, 40,  2, 24,\n        52,  2, 12, 40, 74, 50, 62,  2, 25, 72,  2, 25, 63, 40, 44, 62,  2, 25,\n        54, 65, 58, 63, 40,  2, 48, 44, 62,  2, 54, 69, 40, 69,  2, 60, 70,  9,\n         2, 13, 59, 25, 62,  2, 60, 50, 69,  9,  2, 25, 42, 62, 30, 63, 40, 74,\n         2, 32, 74, 34, 62, 44,  2, 60, 64,  2, 44, 60, 64,  9,  2, 60, 72, 40,\n        62,  2,  0,  2, 13, 59,  2, 42, 64, 46, 25,  2, 25, 64,  2, 32, 74, 51,\n        72, 40, 63,  2, 50, 69,  9,  2, 12,  8, 26, 69,  9,  2, 43, 65,  8, 43,\n        54, 64,  2, 60, 72,  2, 32, 62, 40, 64,  2, 60, 70,  9,  2,  0,  2, 51,\n        60,  2, 30, 50, 25,  2, 42, 50, 25,  2, 25, 63, 40, 44, 64,  2, 14, 52,\n        74, 58, 74, 51, 62,  2, 25, 63, 40, 44, 69,  2, 42, 74, 56, 69, 58,  2,\n        25, 63, 40, 44, 64,  2, 46, 74, 52, 40, 63, 59, 74, 46, 52, 74, 43, 62,\n         2, 25, 63, 40, 44, 64,  2, 42, 65, 57, 74, 30, 63,  9, 40, 62,  2, 24,\n        52,  2, 25, 63, 40, 44, 64,  2, 42, 65, 52, 62, 57, 62,  2, 25, 62,  2,\n        25, 62, 52, 39,  2, 60, 70,  2, 13, 59, 25, 64,  2, 25, 69, 56, 54,  2,\n        25, 54, 74, 46, 44, 62,  2, 59, 69,  2, 60, 64,  2, 52, 72,  9, 27, 35,\n        69,  2, 26, 79, 69,  2, 60, 72,  2, 32, 62, 40, 69,  2, 60, 70,  9,  2,\n         0,  2, 13, 44, 74, 60, 69,  9,  2, 49, 66, 58, 39,  2, 44, 60, 64,  9,\n         2, 42, 66, 58, 39,  2, 25, 60, 44, 62,  2, 11, 43, 63, 25,  2, 15, 46,\n        51, 65, 25, 74, 40,  2, 60, 70,  2,  0,  2, 44, 60, 64,  9,  2, 40, 72,\n         2, 51, 60,  2, 25, 48,  2, 60, 72,  2, 59, 25, 40, 62,  2, 41, 62,  2,\n        25, 63,  2, 25, 72, 14,  2, 44, 56, 56, 43, 66,  2, 46, 40, 63,  2, 25,\n        69,  2, 28, 52,  2, 12, 44, 69,  2, 25, 69,  2, 40, 64, 59, 52, 69,  2,\n        42, 63, 44,  2, 11, 46, 44, 69,  2, 46, 40, 63,  2, 59, 69,  2, 25, 60,\n        40, 64,  2, 25, 63,  2, 50, 69, 52, 69,  2, 46, 63, 40, 62,  2, 44, 69,\n         2, 40, 65, 50, 74, 60, 62, 52, 69,  2, 46, 54, 74, 54, 69,  2, 48, 62,\n         8, 43,  2, 25, 52,  2, 50, 65, 33, 69,  2, 40, 72,  2, 25, 65, 20,  8,\n         2, 50, 69,  9,  2, 38, 25, 69, 54,  2, 42, 63, 51, 62,  2,  0,  2, 57,\n        64, 40, 54, 62,  2, 12, 32,  2, 11, 46, 44, 69,  2, 27, 62,  8, 56,  2,\n        25, 69,  2, 40, 62, 54, 74, 54, 65, 25])\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# testsplit","metadata":{}},{"cell_type":"code","source":"n=int(0.9*len(data))\ntrain_data=data[:n]\nval_data=data[n:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:31:14.346716Z","iopub.execute_input":"2024-12-12T19:31:14.347113Z","iopub.status.idle":"2024-12-12T19:31:14.353323Z","shell.execute_reply.started":"2024-12-12T19:31:14.34708Z","shell.execute_reply":"2024-12-12T19:31:14.351871Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"block_size=9\ntrain_data[:context_len]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:39:18.39921Z","iopub.execute_input":"2024-12-12T19:39:18.399602Z","iopub.status.idle":"2024-12-12T19:39:18.408321Z","shell.execute_reply.started":"2024-12-12T19:39:18.399568Z","shell.execute_reply":"2024-12-12T19:39:18.40697Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"tensor([ 0, 12, 49, 66, 58, 39, 72,  9,  2])"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"x=train_data[:block_size]\ny=train_data[1:block_size+1]\nfor t in range (block_size):\n    contex=x[:t+1]\n    target=y[t]\n    print(f\"when the input is {contex} the targer: {target}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-12T19:39:56.539757Z","iopub.execute_input":"2024-12-12T19:39:56.540281Z","iopub.status.idle":"2024-12-12T19:39:56.551594Z","shell.execute_reply.started":"2024-12-12T19:39:56.540229Z","shell.execute_reply":"2024-12-12T19:39:56.550124Z"}},"outputs":[{"name":"stdout","text":"when the input is tensor([0]) the targer: 12\nwhen the input is tensor([ 0, 12]) the targer: 49\nwhen the input is tensor([ 0, 12, 49]) the targer: 66\nwhen the input is tensor([ 0, 12, 49, 66]) the targer: 58\nwhen the input is tensor([ 0, 12, 49, 66, 58]) the targer: 39\nwhen the input is tensor([ 0, 12, 49, 66, 58, 39]) the targer: 72\nwhen the input is tensor([ 0, 12, 49, 66, 58, 39, 72]) the targer: 9\nwhen the input is tensor([ 0, 12, 49, 66, 58, 39, 72,  9]) the targer: 2\nwhen the input is tensor([ 0, 12, 49, 66, 58, 39, 72,  9,  2]) the targer: 25\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}